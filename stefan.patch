From 795327e0d33b89315debef58f07c2fee54b7d1cf Mon Sep 17 00:00:00 2001
From: stheppi <stefan.bocutiu@gmail.com>
Date: Wed, 11 Jan 2017 23:36:13 +0000
Subject: [PATCH] fixing the source code

---
 Chapter01/gradle_project/build.gradle              |  10 +-
 Chapter01/maven-mix/pom.xml                        |  24 ++-
 Chapter03/inheritance/.idea/vcs.xml                |   1 +
 Chapter03/inheritance/build.gradle                 |  40 +++++
 Chapter03/inheritance/gradle.properties            |   1 +
 Chapter03/inheritance/gradlew                      | 164 +++++++++++++++++++++
 Chapter03/inheritance/gradlew.bat                  |  90 +++++++++++
 Chapter03/inheritance/settings.gradle              |   2 +
 Chapter03/polymorphism/build.gradle                |   4 +-
 Chapter06/build.gradle                             |   4 +-
 .../com/programming/kotlin/chapter06/Measure.kt    |  20 +++
 .../programming/kotlin/chapter06/NonNullProp.kt    |  12 ++
 .../com/programming/kotlin/chapter06/Player.kt     |   7 +
 .../com/programming/kotlin/chapter06/Program.kt    |  74 ++++++++++
 .../com/programming/kotlin/chapter06/PropsByMap.kt |  28 ++++
 .../com/programming/kotlin/chapter06/Shape.kt      |  15 ++
 .../com/programming/kotlin/chapter06/Student.kt    |  19 +++
 .../com/programming/kotlin/chapter06/Trivial.kt    |  14 ++
 .../kotlin/chapter06/WithInheritance.kt            |  26 ++++
 .../kotlin/chapter06/WithObservableProp.kt         |  17 +++
 .../kotlin/chapter06/WithPrivateSetter.kt          |  14 ++
 Chapter09/build.gradle                             |   4 +-
 Chapter10/build.gradle                             |   2 +
 .../com/programming/kotlin/chapter10/Program.kt    |   1 -
 .../kotlin/chapter12/hello/api/HelloService.java   |   2 +
 Chapter12/pom.xml                                  |   2 +-
 26 files changed, 587 insertions(+), 10 deletions(-)
 create mode 100644 Chapter03/inheritance/build.gradle
 create mode 100644 Chapter03/inheritance/gradle.properties
 create mode 100755 Chapter03/inheritance/gradlew
 create mode 100644 Chapter03/inheritance/gradlew.bat
 create mode 100644 Chapter03/inheritance/settings.gradle
 create mode 100644 Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Measure.kt
 create mode 100644 Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/NonNullProp.kt
 create mode 100644 Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Player.kt
 create mode 100644 Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Program.kt
 create mode 100644 Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/PropsByMap.kt
 create mode 100644 Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Shape.kt
 create mode 100644 Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Student.kt
 create mode 100644 Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Trivial.kt
 create mode 100644 Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/WithInheritance.kt
 create mode 100644 Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/WithObservableProp.kt
 create mode 100644 Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/WithPrivateSetter.kt

diff --git a/Chapter01/gradle_project/build.gradle b/Chapter01/gradle_project/build.gradle
index 875e9e0..0abe44d 100644
--- a/Chapter01/gradle_project/build.gradle
+++ b/Chapter01/gradle_project/build.gradle
@@ -2,9 +2,10 @@ group 'com.programming.kotlin'
 version '1.0-SNAPSHOT'
 
 buildscript {
-    ext.kotlin_version = '1.0.3'
+    ext.kotlin_version = '1.1-M04'
 
     repositories {
+        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
         mavenCentral()
     }
     dependencies {
@@ -12,13 +13,14 @@ buildscript {
     }
 }
 
+repositories {
+    maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
+    mavenCentral()
+}
 apply plugin: 'kotlin'
 apply plugin: 'application'
 mainClassName = "com.programming.kotlin.chapter01.ProgramKt"
 
-repositories {
-    mavenCentral()
-}
 
 dependencies {
     compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
diff --git a/Chapter01/maven-mix/pom.xml b/Chapter01/maven-mix/pom.xml
index b73ff37..4675d17 100644
--- a/Chapter01/maven-mix/pom.xml
+++ b/Chapter01/maven-mix/pom.xml
@@ -9,11 +9,33 @@
     <version>1.0-SNAPSHOT</version>
     <packaging>jar</packaging>
 
+    <pluginRepositories>
+        <pluginRepository>
+            <snapshots>
+                <enabled>true</enabled>
+            </snapshots>
+            <id>bintray-kotlin-kotlin-dev</id>
+            <name>bintray</name>
+            <url>http://dl.bintray.com/kotlin/kotlin-dev</url>
+        </pluginRepository>
+    </pluginRepositories>
+
+    <repositories>
+        <repository>
+            <snapshots>
+                <enabled>true</enabled>
+            </snapshots>
+            <id>bintray-kotlin-kotlin-dev</id>
+            <name>bintray</name>
+            <url>http://dl.bintray.com/kotlin/kotlin-dev</url>
+        </repository>
+    </repositories>
+
     <name>com.programming.kotlin chapter01-maven-mix</name>
 
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-        <kotlin.version>1.0.3</kotlin.version>
+        <kotlin.version>1.1-M04</kotlin.version>
         <junit.version>4.12</junit.version>
     </properties>
 
diff --git a/Chapter03/inheritance/.idea/vcs.xml b/Chapter03/inheritance/.idea/vcs.xml
index b2bdec2..be6fe19 100644
--- a/Chapter03/inheritance/.idea/vcs.xml
+++ b/Chapter03/inheritance/.idea/vcs.xml
@@ -2,5 +2,6 @@
 <project version="4">
   <component name="VcsDirectoryMappings">
     <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
   </component>
 </project>
\ No newline at end of file
diff --git a/Chapter03/inheritance/build.gradle b/Chapter03/inheritance/build.gradle
new file mode 100644
index 0000000..13fa8b1
--- /dev/null
+++ b/Chapter03/inheritance/build.gradle
@@ -0,0 +1,40 @@
+group 'com.programming.kotlin'
+version '1.0-SNAPSHOT'
+
+buildscript {
+    ext.kotlin_version = '1.1-M04'
+
+    repositories {
+        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
+        mavenCentral()
+    }
+    dependencies {
+        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
+    }
+}
+
+apply plugin: 'kotlin'
+apply plugin: 'application'
+mainClassName = "com.programming.kotlin.chapter03.ProgramKt"
+
+repositories {
+    maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
+    mavenCentral()
+}
+
+dependencies {
+    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
+    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
+    compile "joda-time:joda-time:2.3"
+
+}
+
+jar {
+    manifest {
+        attributes(
+                'Main-Class': 'com.programming.kotlin.chapter03.ProgramKt'
+        )
+    }
+
+    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
+}
diff --git a/Chapter03/inheritance/gradle.properties b/Chapter03/inheritance/gradle.properties
new file mode 100644
index 0000000..587b727
--- /dev/null
+++ b/Chapter03/inheritance/gradle.properties
@@ -0,0 +1 @@
+kotlin.incremental=true
\ No newline at end of file
diff --git a/Chapter03/inheritance/gradlew b/Chapter03/inheritance/gradlew
new file mode 100755
index 0000000..27309d9
--- /dev/null
+++ b/Chapter03/inheritance/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/Chapter03/inheritance/gradlew.bat b/Chapter03/inheritance/gradlew.bat
new file mode 100644
index 0000000..832fdb6
--- /dev/null
+++ b/Chapter03/inheritance/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/Chapter03/inheritance/settings.gradle b/Chapter03/inheritance/settings.gradle
new file mode 100644
index 0000000..2d4143f
--- /dev/null
+++ b/Chapter03/inheritance/settings.gradle
@@ -0,0 +1,2 @@
+rootProject.name = 'inheritance'
+
diff --git a/Chapter03/polymorphism/build.gradle b/Chapter03/polymorphism/build.gradle
index 3d96316..13fa8b1 100644
--- a/Chapter03/polymorphism/build.gradle
+++ b/Chapter03/polymorphism/build.gradle
@@ -2,9 +2,10 @@ group 'com.programming.kotlin'
 version '1.0-SNAPSHOT'
 
 buildscript {
-    ext.kotlin_version = '1.0.3'
+    ext.kotlin_version = '1.1-M04'
 
     repositories {
+        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
         mavenCentral()
     }
     dependencies {
@@ -17,6 +18,7 @@ apply plugin: 'application'
 mainClassName = "com.programming.kotlin.chapter03.ProgramKt"
 
 repositories {
+    maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
     mavenCentral()
 }
 
diff --git a/Chapter06/build.gradle b/Chapter06/build.gradle
index e623913..161304f 100644
--- a/Chapter06/build.gradle
+++ b/Chapter06/build.gradle
@@ -2,9 +2,10 @@ group 'com.programming.kotlin'
 version '1.0-SNAPSHOT'
 
 buildscript {
-    ext.kotlin_version = '1.0.3'
+    ext.kotlin_version = '1.1-M04'
 
     repositories {
+        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
         mavenCentral()
     }
     dependencies {
@@ -17,6 +18,7 @@ apply plugin: 'application'
 mainClassName = "com.programming.kotlin.chapter06.ProgramKt"
 
 repositories {
+    maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
     mavenCentral()
 }
 
diff --git a/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Measure.kt b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Measure.kt
new file mode 100644
index 0000000..6951b83
--- /dev/null
+++ b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Measure.kt
@@ -0,0 +1,20 @@
+package com.programming.kotlin.chapter06
+
+import kotlin.reflect.KProperty
+
+class TimestampValueDelegate {
+    private var timestamp = 0L
+    operator fun getValue(ref: Any?, property: KProperty<*>): Long {
+        return timestamp;
+    }
+
+    operator fun setValue(ref: Any?, property: KProperty<*>, value: Long) {
+        timestamp = value
+    }
+}
+
+class Measure {
+    var writeTimestamp: Long by TimestampValueDelegate()
+}
+
+
diff --git a/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/NonNullProp.kt b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/NonNullProp.kt
new file mode 100644
index 0000000..31f7833
--- /dev/null
+++ b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/NonNullProp.kt
@@ -0,0 +1,12 @@
+package com.programming.kotlin.chapter06
+
+import kotlin.properties.Delegates
+
+
+class NonNullProp {
+    var value: String by Delegates.notNull<String>()
+
+    var value2:ForProp by Delegates.notNull<ForProp>()
+}
+
+data class ForProp(val someField:String)
\ No newline at end of file
diff --git a/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Player.kt b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Player.kt
new file mode 100644
index 0000000..0cc30f1
--- /dev/null
+++ b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Player.kt
@@ -0,0 +1,7 @@
+package com.programming.kotlin.chapter06
+
+class Player(val map: Map<String, Any?>) {
+    val name: String by map
+    val age: Int     by map
+    val height: Double by map
+}
\ No newline at end of file
diff --git a/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Program.kt b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Program.kt
new file mode 100644
index 0000000..c67911b
--- /dev/null
+++ b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Program.kt
@@ -0,0 +1,74 @@
+package com.programming.kotlin.chapter06
+
+fun main(args: Array<String>) {
+    val student = Student("Jamie Fox", 20)
+    println("${student.name} is ${student.age} years old")
+    student.age += 1
+    println("${student.name} is ${student.age} years old")
+
+    val withPrivateSetter = WithPrivateSetter(10)
+    println("withPrivateSetter:${withPrivateSetter.SomeProperty}")
+
+
+    val withInheritance = WithInheritanceDerived(true)
+    withInheritance.doSomething()
+    println("withInheritance:${withInheritance.isAvailable}")
+
+    val container = Container()
+    container.initProperty(DelayedInstance(10))
+    println("with delayed initialization:Number=${container.delayedInitProperty.number}")
+
+    val record = Record("111")
+    println(record.id)
+
+
+    val measure = Measure()
+    measure.writeTimestamp = System.currentTimeMillis()
+    println("Current measure taken at:${measure.writeTimestamp}")
+    Thread.sleep(100)
+    measure.writeTimestamp = System.currentTimeMillis()
+    println("Current measure taken at:${measure.writeTimestamp}")
+
+    val propsByMap = PropsByMap()
+    println("Props with map: p1=${propsByMap.p1}")
+    println("Props with map: p2=${propsByMap.p2}")
+    propsByMap.p1 = 100
+    println("Props with map: p1=${propsByMap.p1}")
+
+
+    val player = Player(mapOf("name" to "Alex Jones", "age" to 28, "height" to 1.82))
+    println("Player ${player.name} is ${player.age} ages old and is ${player.height} cm tall")
+
+    val trivial = Trivial()
+    println("Trivial flag is :${trivial.flag}")
+
+    val withLazyProperty = WithLazyProperty()
+    val total = withLazyProperty.foo + withLazyProperty.foo
+    println("Lazy property total:$total")
+
+    val x = WithLazyPropertyWithLocking()
+    val totalx = withLazyProperty.foo + withLazyProperty.foo
+    println("Lazy property total:$totalx")
+
+
+    val onChange = WithObservableProp()
+    onChange.value = 10
+    onChange.value = -20
+
+    val positiveVal = OnlyPositiveValues()
+    positiveVal.value = 100
+    println("positiveVal value is ${positiveVal.value}")
+
+    positiveVal.value = -100
+    println("positiveVal value is ${positiveVal.value}")
+
+    positiveVal.value = 111
+    println("positiveVal value is ${positiveVal.value}")
+
+    val nonNull = NonNullProp()
+    nonNull.value = "Kotlin rocks"
+    println("Non null value is: ${nonNull.value}")
+
+
+}
+
diff --git a/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/PropsByMap.kt b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/PropsByMap.kt
new file mode 100644
index 0000000..646304c
--- /dev/null
+++ b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/PropsByMap.kt
@@ -0,0 +1,28 @@
+package com.programming.kotlin.chapter06
+
+import kotlin.reflect.KProperty
+
+class MapDelegate {
+   private val map = mutableMapOf<String, Any?>()
+    operator fun <T> getValue(ref: Any?, property: KProperty<*>): T {
+        return map[property.name] as T
+    }
+
+    operator fun <T> setValue(ref: Any?, property: KProperty<*>, value: T?) {
+        map.put(property.name, value)
+    }
+}
+
+data class SomeData(val char: Char)
+
+class PropsByMap() {
+    private val mapDelegate = MapDelegate()
+    var p1: Int by mapDelegate
+
+    val p2: SomeData by mapDelegate
+
+    init {
+        mapDelegate.setValue(this, PropsByMap::p2, SomeData('K'))
+        mapDelegate.setValue(this, PropsByMap::p1, 0)
+    }
+}
\ No newline at end of file
diff --git a/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Shape.kt b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Shape.kt
new file mode 100644
index 0000000..343870b
--- /dev/null
+++ b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Shape.kt
@@ -0,0 +1,15 @@
+package com.programming.kotlin.chapter06
+
+interface Shape {
+    val Area: Double
+        get;
+}
+
+class Rectangle(val width: Double, val height: Double) : Shape {
+    override val Area: Double
+        get() = width * height
+
+    val isSquare: Boolean
+        get() = width == height
+
+}
\ No newline at end of file
diff --git a/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Student.kt b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Student.kt
new file mode 100644
index 0000000..9ab20a2
--- /dev/null
+++ b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Student.kt
@@ -0,0 +1,19 @@
+package com.programming.kotlin.chapter06
+
+class Student(var name: String, var age: Int) {
+/*
+    public var Name = ""
+        set(value) {
+            field = value
+        }
+
+    public var Age = 20
+        set(value) {
+            field = value
+        }
+
+    init {
+        Name = name
+        Age = age
+    }*/
+}
\ No newline at end of file
diff --git a/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Trivial.kt b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Trivial.kt
new file mode 100644
index 0000000..7652348
--- /dev/null
+++ b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/Trivial.kt
@@ -0,0 +1,14 @@
+package com.programming.kotlin.chapter06
+
+import kotlin.properties.ReadOnlyProperty
+import kotlin.reflect.KProperty
+
+data class TrivialProperty(private val const: Int) : ReadOnlyProperty<Trivial, Int> {
+    override fun getValue(thisRef: Trivial, property: KProperty<*>): Int {
+        return const;
+    }
+}
+
+class Trivial {
+    val flag: Int by TrivialProperty(999)
+}
\ No newline at end of file
diff --git a/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/WithInheritance.kt b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/WithInheritance.kt
new file mode 100644
index 0000000..82567f4
--- /dev/null
+++ b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/WithInheritance.kt
@@ -0,0 +1,26 @@
+package com.programming.kotlin.chapter06
+
+open class WithInheritance {
+    open var isAvailable: Boolean = false
+        get() = field
+        protected set(value) {
+            field = value
+        }
+}
+
+class WithInheritanceDerived(isAvailable: Boolean) : WithInheritance() {
+    override var isAvailable: Boolean = isAvailable
+        get() {
+            //do something before returning the value
+            return super.isAvailable
+        }
+        set(value) {
+            //do something else before setting the value
+            println("WithInhertianceDerived.isAvailable")
+            field = value
+        }
+
+    fun doSomething() {
+        isAvailable = false
+    }
+}
\ No newline at end of file
diff --git a/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/WithObservableProp.kt b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/WithObservableProp.kt
new file mode 100644
index 0000000..320683f
--- /dev/null
+++ b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/WithObservableProp.kt
@@ -0,0 +1,17 @@
+package com.programming.kotlin.chapter06
+
+import kotlin.properties.Delegates
+
+
+class WithObservableProp {
+    var value: Int by Delegates.observable(0) { p, oldNew, newVal -> onValueChanged() }
+
+    private fun onValueChanged() {
+        println("value has changed:$value")
+    }
+}
+
+
+class OnlyPositiveValues {
+    var value: Int by Delegates.vetoable(0) { p, oldNew, newVal -> newVal >= 0 }
+}
diff --git a/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/WithPrivateSetter.kt b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/WithPrivateSetter.kt
new file mode 100644
index 0000000..751a273
--- /dev/null
+++ b/Chapter06/src/main/kotlin/com/programming/kotlin/chapter06/WithPrivateSetter.kt
@@ -0,0 +1,14 @@
+package com.programming.kotlin.chapter06
+
+import java.util.*
+
+class WithPrivateSetter(property: Int) {
+    var SomeProperty: Int = 0
+        private set(value) {
+            field = value
+        }
+
+    init {
+        SomeProperty = property
+    }
+}
\ No newline at end of file
diff --git a/Chapter09/build.gradle b/Chapter09/build.gradle
index 4fdffba..076d4bd 100644
--- a/Chapter09/build.gradle
+++ b/Chapter09/build.gradle
@@ -2,9 +2,10 @@ group 'com.programming.kotlin'
 version '1.0-SNAPSHOT'
 
 buildscript {
-    ext.kotlin_version = '1.0.3'
+    ext.kotlin_version = '1.1-M04'
 
     repositories {
+        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
         mavenCentral()
     }
     dependencies {
@@ -17,6 +18,7 @@ apply plugin: 'application'
 mainClassName = "com.programming.kotlin.chapter09.ProgramKt"
 
 repositories {
+    maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
     mavenCentral()
 }
 
diff --git a/Chapter10/build.gradle b/Chapter10/build.gradle
index 92c0303..f5bd931 100644
--- a/Chapter10/build.gradle
+++ b/Chapter10/build.gradle
@@ -5,6 +5,7 @@ buildscript {
     ext.kotlin_version = '1.0.4'
 
     repositories {
+        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
         mavenCentral()
     }
     dependencies {
@@ -17,6 +18,7 @@ apply plugin: 'application'
 mainClassName = "com.programming.kotlin.chapter10.ProgramKt"
 
 repositories {
+    maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
     mavenCentral()
 }
 
diff --git a/Chapter10/src/main/kotlin/com/programming/kotlin/chapter10/Program.kt b/Chapter10/src/main/kotlin/com/programming/kotlin/chapter10/Program.kt
index 6254fe1..b280ba6 100644
--- a/Chapter10/src/main/kotlin/com/programming/kotlin/chapter10/Program.kt
+++ b/Chapter10/src/main/kotlin/com/programming/kotlin/chapter10/Program.kt
@@ -23,5 +23,4 @@ fun main(args: Array<String>): Unit {
 
 fun <T> itWorks(list: List<T>): Unit {
     println("Java Class Type:" + list.javaClass.canonicalName)
-
 }
\ No newline at end of file
diff --git a/Chapter12/hello-api/src/main/java/com/programming/kotlin/chapter12/hello/api/HelloService.java b/Chapter12/hello-api/src/main/java/com/programming/kotlin/chapter12/hello/api/HelloService.java
index 828c6b6..4260a68 100644
--- a/Chapter12/hello-api/src/main/java/com/programming/kotlin/chapter12/hello/api/HelloService.java
+++ b/Chapter12/hello-api/src/main/java/com/programming/kotlin/chapter12/hello/api/HelloService.java
@@ -11,6 +11,8 @@ import com.lightbend.lagom.javadsl.api.Service;
 import com.lightbend.lagom.javadsl.api.ServiceCall;
 
 import static com.lightbend.lagom.javadsl.api.Service.named;
+import static com.lightbend.lagom.javadsl.api.Service.namedCall;
+import static com.lightbend.lagom.javadsl.api.Service.pathCall;
 
 /**
  * The Hello service interface.
diff --git a/Chapter12/pom.xml b/Chapter12/pom.xml
index 74edcbb..abd93ce 100644
--- a/Chapter12/pom.xml
+++ b/Chapter12/pom.xml
@@ -221,7 +221,7 @@
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 
-        <kotlin.version>1.1-M03-eap-24</kotlin.version>
+        <kotlin.version>1.1-M04</kotlin.version>
         <lagom.version>1.2.0</lagom.version>
         <play.version>2.5.4</play.version>
         <conductr.lib.name>lagom10-conductr-bundle-lib_2.11</conductr.lib.name>
-- 
2.5.0

